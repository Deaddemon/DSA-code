//we will use unordered map
//similar questions:
//longest subarray with equal number of zeroes and ones : here replace 0 with -1 , after that it becomes similar to finding longest subarray with given sum, here the sum is equal to zero
//longest common span with same sum in two binary arrays: subtract one array from other and then it reduces to finding longest subarray with given sum


#include <bits/stdc++.h>
using namespace std;

int calc(vector<int> &arr, int n, int sum){
    unordered_map<int,int> m;
    int pre_sum=0 , ans=0;
    for(int i=0 ; i<n ; i++){
        pre_sum += arr[i];
        
        if(pre_sum == sum) ans= i+1;
        if(m.find(pre_sum) == m.end()){
            m.insert({pre_sum,i});
            
        }
        
        if(m.find(pre_sum-sum) != m.end()){
            ans = max(ans,i-m[pre_sum-sum]);
        }
    }
    return ans;
}
int main() {
   vector<int> arr = {8,3,1,5,-6,6,2,2};
   int n= 8;
   int sum=4;
   
   cout<<calc(arr,n,sum);
}
